{% extends "base.html.twig" %}

    {% block body %}
        

<div class="content">
    <h1>Välkommen till Report</h1>

    <p>
        Det här är en test page för kursen MVC. Kmom01
    </p>
    <div class="report">
        <h4>Kmom01</h4>
        <p>
            De erfarenheter jag har sedan tidigare med objektorientering är från kursen oopython. Där fick vi jobba med både klasser och arv.
            Av det lilla vi nu gjort så tycker jag inte att det skiljer sig alltför mycket med hur man jobbar med det i PHP. 
        </p>
        <p>
            För att skapa en klass i php använder man keyword: class och sedan namnet på klassen. Sedan ramar man in klassen med måsvingar. I klassen använder man sig utav "properties" och "methods" för att bygga upp klassen. För att sedan instanciera klassen så använder man keyword: new och sedan klassens namn följt av ().<br>
            <a href="https://www.php.net/manual/en/language.oop5.basic.php"> PHP-manual för klasser</a>
        </p>
        <p>
            Kodbasen man får av ramverket är väldigt lätt att följa. Man har controllers och vyer. Det som man ger tillgång till läggs i public. Det var överraskande smidigt att routa till en ny vy. Att bara använda annotaitions var inget jag tidigare gjort. Hur det fungerar vet jag tyvärr inte. Det är något man bör ta reda på om man ska jobba mycket med ramverket.<br>
            Det lätt att se hur saker hänger ihop men inte alltid så lätt att se varför det fungerar.
        </p>
        <p>
            De delar av "PHP The Right Way" som jag tyckte var mest intressanta var "Design Patterns" eftersom det är det som kursen till stor del handlar om. Men också delen "Working with UTF-8" den delen lär komma till användning senare i kursen. Jag gissar att det är ett vanligt fel att missa om man inte sedan tidigare är van att ta speciell hänsyn när man jobbar med strängar.
        </p>
        TIL:
        <P>
            Hur smidigt det är att jobba med ramverk. Samt att PHP verkar ha ett stort community som bryr sig om språket. Det finns bra med dokumentation att tillgå.
        </P>
        <h4>Kmom02</h4>
        <p>
            Arv är en av de vanligaste objektorienterade konstruktionerna.
            Den ärvande klassen utökar, eller specialiserar, basklassen. Basklassen kallas även superklass och den ärvande klassen kallas subklass.<br> <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/arv-med-grafisk-tarning"> Dbwebb om Arv</a>
        </p>
        <p>
            Komposition är när ett object använder sig utav ett annat, det är ett sätt att kombinera object och data typer. <br>
            <br>
            Relationen har-en, has-a, kallas “object composition”. En variant av objekt komposition är “objekt aggregat” där skillnaden är hur stark kopplingen är mellan objekten. Komposition innebär en stark koppling och aggregat innebär en svagare koppling mellan objekten<br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/komposition-med-en-tarningshand"> Dbwebb om komposition</a>
        </p>
        <p>
            Trait består av metoder och medlemsvariabler vilka kan användas för att utöka funktionaliteten av en klass. <br>
            Man kan tänka på trait som kodmoduler som är återanvändbara i flera klasser. Ett trait kan lösa funktioner som många olika klasser skulle kunna ha nytta av. Ett trait kan ofta återanvändas av olika typer av klasser. <br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/vad-ar-trait"> Dbwebb om trait</a>
        </p>
        <p>
            Interface är ett kontrakt där en klass lovar att erbjuda en viss uppsättning metoder. <br>
            En klass kan implementera ett interface, det innebär att klassen förbinder sig att erbjuda ett API som motsvaras av interfacet. <br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/vad-ar-interface"> Dbwebb om Interface</a> <br>

            Det hjälper oss att bygga på vår kod med att fortfarande hålla den bakåtkompatibel.
        </p>

        <p>
            I klassen Card valde jag att skapa tre stycken arrayer. En för färgerna(suits) och en för värdena(ranks). Den tredje arrayen innehåller alla korten och den fylls via loopar i konstruktorn. Klassen har tre stycken metoder för att få ut de tre olika arrayerna. Jag har inte implementerat några setters men det kan vara bra att göra beroende på vad man ska använda korten till.
        </p>
        <p>
            I Deck klassen så skapar jag ett Card objekt i konstruktorn för att sedan skriva över den till en array med alla korten. <br>
            Metoderna i klassen jobbar sedan med arrayen. <br>
            DeckWith2Jokers ärver ifrån deck och lägger sedan till två jokarar i konstruktorn. 
        </p>
        <p>
            Hand klassen har en array som den kan fylla med kort(strängar),
            metoderna jobbar sedan med arrayer för att lägga till och ta bort. För att lägga till korten valde jag att köra array_merge(). Så att man då skickar in en array med alla kort man vill lägga till.
        </p>

        <p>
            I Player klassen instanciera jag ett Hand-objekt i konstruktorn och jobbar sedan med det i metoderna. Här har jag inte implementerat något sätt att ta bort kort men det är en förbättringsmöjlighet.
            Jag la inte till något sätt för players att hålla poäng men det kan möjligen behövas beroende på vilka spel man ska använda. 
        </p>
        <p>
            Fsörbättringsmöjlighet finns onekligen i alla klasser. Ett bra alternativ hade nog varit att skapa ett interface för Card. Då kan man lägga till många olika kortlekar beroende på vad man ska spela.
        </p>
        <p>
            TIL: Håll dig till uppgiften, sväva inte iväg och skapa massa onödigt.
        </p>
        <h4>Kmom03</h4>
        <h4>Kmom04</h4>
        <h4>Kmom05</h4>
        <h4>Kmom06</h4>
        <h4>Kmom10</h4>
    </div>
</div>
{% endblock body %}
