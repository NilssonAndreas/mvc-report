{% extends "base.html.twig" %}

    {% block body %}
        

<div class="content">
    <h1>Välkommen till Report</h1>

    <p>
        Det här är en test page för kursen MVC. Kmom01
    </p>
    <div class="report">
        <h4>Kmom01</h4>
        <p>
            De erfarenheter jag har sedan tidigare med objektorientering är från kursen oopython. Där fick vi jobba med både klasser och arv.
            Av det lilla vi nu gjort så tycker jag inte att det skiljer sig alltför mycket med hur man jobbar med det i PHP. 
        </p>
        <p>
            För att skapa en klass i php använder man keyword: class och sedan namnet på klassen. Sedan ramar man in klassen med måsvingar. I klassen använder man sig utav "properties" och "methods" för att bygga upp klassen. För att sedan instanciera klassen så använder man keyword: new och sedan klassens namn följt av ().<br>
            <a href="https://www.php.net/manual/en/language.oop5.basic.php"> PHP-manual för klasser</a>
        </p>
        <p>
            Kodbasen man får av ramverket är väldigt lätt att följa. Man har controllers och vyer. Det som man ger tillgång till läggs i public. Det var överraskande smidigt att routa till en ny vy. Att bara använda annotaitions var inget jag tidigare gjort. Hur det fungerar vet jag tyvärr inte. Det är något man bör ta reda på om man ska jobba mycket med ramverket.<br>
            Det lätt att se hur saker hänger ihop men inte alltid så lätt att se varför det fungerar.
        </p>
        <p>
            De delar av "PHP The Right Way" som jag tyckte var mest intressanta var "Design Patterns" eftersom det är det som kursen till stor del handlar om. Men också delen "Working with UTF-8" den delen lär komma till användning senare i kursen. Jag gissar att det är ett vanligt fel att missa om man inte sedan tidigare är van att ta speciell hänsyn när man jobbar med strängar.
        </p>
        TIL:
        <P>
            Hur smidigt det är att jobba med ramverk. Samt att PHP verkar ha ett stort community som bryr sig om språket. Det finns bra med dokumentation att tillgå.
        </P>
        <h4>Kmom02</h4>
        <p>
            Arv är en av de vanligaste objektorienterade konstruktionerna.
            Den ärvande klassen utökar, eller specialiserar, basklassen. Basklassen kallas även superklass och den ärvande klassen kallas subklass.<br> <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/arv-med-grafisk-tarning"> Dbwebb om Arv</a>
        </p>
        <p>
            Komposition är när ett object använder sig utav ett annat, det är ett sätt att kombinera object och data typer. <br>
            <br>
            Relationen har-en, has-a, kallas “object composition”. En variant av objekt komposition är “objekt aggregat” där skillnaden är hur stark kopplingen är mellan objekten. Komposition innebär en stark koppling och aggregat innebär en svagare koppling mellan objekten<br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/komposition-med-en-tarningshand"> Dbwebb om komposition</a>
        </p>
        <p>
            Trait består av metoder och medlemsvariabler vilka kan användas för att utöka funktionaliteten av en klass. <br>
            Man kan tänka på trait som kodmoduler som är återanvändbara i flera klasser. Ett trait kan lösa funktioner som många olika klasser skulle kunna ha nytta av. Ett trait kan ofta återanvändas av olika typer av klasser. <br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/vad-ar-trait"> Dbwebb om trait</a>
        </p>
        <p>
            Interface är ett kontrakt där en klass lovar att erbjuda en viss uppsättning metoder. <br>
            En klass kan implementera ett interface, det innebär att klassen förbinder sig att erbjuda ett API som motsvaras av interfacet. <br>
            <a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/vad-ar-interface"> Dbwebb om Interface</a> <br>

            Det hjälper oss att bygga på vår kod med att fortfarande hålla den bakåtkompatibel.
        </p>

        <p>
            I klassen Card valde jag att skapa tre stycken arrayer. En för färgerna(suits) och en för värdena(ranks). Den tredje arrayen innehåller alla korten och den fylls via loopar i konstruktorn. Klassen har tre stycken metoder för att få ut de tre olika arrayerna. Jag har inte implementerat några setters men det kan vara bra att göra beroende på vad man ska använda korten till.
        </p>
        <p>
            I Deck klassen så skapar jag ett Card objekt i konstruktorn för att sedan skriva över den till en array med alla korten. <br>
            Metoderna i klassen jobbar sedan med arrayen. <br>
            DeckWith2Jokers ärver ifrån deck och lägger sedan till två jokarar i konstruktorn. 
        </p>
        <p>
            Hand klassen har en array som den kan fylla med kort(strängar),
            metoderna jobbar sedan med arrayer för att lägga till och ta bort. För att lägga till korten valde jag att köra array_merge(). Så att man då skickar in en array med alla kort man vill lägga till.
        </p>

        <p>
            I Player klassen instanciera jag ett Hand-objekt i konstruktorn och jobbar sedan med det i metoderna. Här har jag inte implementerat något sätt att ta bort kort men det är en förbättringsmöjlighet.
            Jag la inte till något sätt för players att hålla poäng men det kan möjligen behövas beroende på vilka spel man ska använda. 
        </p>
        <p>
            Fsörbättringsmöjlighet finns onekligen i alla klasser. Ett bra alternativ hade nog varit att skapa ett interface för Card. Då kan man lägga till många olika kortlekar beroende på vad man ska spela.
        </p>
        <p>
            TIL: Håll dig till uppgiften, sväva inte iväg och skapa massa onödigt.
        </p>
        <h4>Kmom03</h4>

        <p>
            Jag tycker att det gick rätt bra med FlowCharten, slutprodukten blev liknande. <br> Psudo koden blev rätt torftig och var lite knepigare. Jag visste ungefär hur jag ville strukturera programmet men det var svårt att få ner i ord.
        </p>
        <p>
            Det är alltid bra att ha en plan innan man börjar, och att ha något att jobba efter. Jag fick bra hjälp av FlowCharten och till viss del Psudokoden.
        </p>
        <p>
            Jag valde att implementera en klass för att hantera spelet. Game använder sig utav Player för både spelaren och banken. Jag funderade på att skapa en klass AI som skulle ärva ifrån Player. Men jag kom fram till att den lilla logik jag behövde kunde lika gärna ligga i en funktion. Om jag ville ha en liten smaratare Ai som skulle göra fler saker så hade jag gjort det till en egen klass.
        </p>
            
            Jag valde att ha en funtion som hanterar en runda av spelet. Den drar ett kort ger det till spelaren, kollar poängen och om man är över 21.
            När man kommer till Landningssidan så sparas Game objectet i en session och när man sedan trycker start så  routas man till game/start och en runda körs.<br>
            Knappen "Ta kort" routar tillbaka till sig själv och så körs en ny runda.
            Twig filen kollar om man är över 21 och i så fall visas ett meddelande och man kan inte ta fler kort
        <p>
        <p>
            Det finns så klart stor förbättringsmöjlighet för spelet. Stylen och layouten har mycket mer att önska.<br> Sen är det inte så snyggt att det dras ett kort så for man trycker start, snyggare hade varit om det drogs först vid klick på "dra kort". <br>
            Eftersom jag ligger efter i kursen så försökte jag verkligen att hålla mig till "KISS". Jag valde därför att göra det så simplet jag kunde, att Ess bara är värt 1 var ett medvetet val för att spara lite tid och hålla det lätt. Men det är så klart snyggare om ess kan vara värt antigen 1 eller 14 <br>
        </p>
        <p>
            En annan förbättringsmöjlighet är att fixa sättet att kolla score för Player. Som det är nu resetar jag score och loopar sedan igenom hela handen och sätter ett nytt score. Det är både prestanda krävande och inte alls snyggt. Sen används även en loop och en switch för att bestämma poängen, ett bättre alternativ hade nog varit att sätta poängen redan i Card-klassen. Sedan skickat med dom som key/value där key är kortet och value är värdet.
        </p>
        <p>
            Jag tycker att det går väldigt bra att använda Symfony. Det finns säkert massor av smarta funktioner som jag inte använder mig utav men det är lätt att sätta sig in i och komma igång. Det fungerar väldigt bra tillsammans med Twig.
        </p>
        <p>
            TIL: "Measure Twice, Cut Once", Bra förarbete underlättar och sparar tid.
        </p>
        </p>
        <h4>Kmom04</h4>

        <p>
            Jag tycker det gick bra att skriva kode för att testa klasserna. Det påminnede mycket om det vi gjorde i pythonkursen. Det svåra är att veta vilka tester man ska köra. PHPUnit var trevligt att jobba med. Man fick bra feedback och överblick. Jag fick det inte att fungera med Composer men det fungerade i terminalen så jag körde på det. 
        </p>
        <p>
            Jag lyckades ok med kodtäckningen, över 90% förutom på "Classes and Traits" där det fanns mer att önska.
        </p>
        <p>
            Dom flesta klasserna var väldigt testbara. Den som inte var testbar var Game. Det största problemet var att jag valde att skapa en funktion (setGameState) som kör många andra funktioner. Jag valde att ha det så fär att det passade bra i mitt upplägg men i framtiden kan det vara bra att dela upp funktionerna lite mer.
        </p>
        <p>
            Jag ändrade lite i koden, Jag hade implementerat en medtod för att ta bort kort i Hand. Men eftersom jag inte använde mig utav den så tog jag bort den helt. I övrigt så ändrade jag inget.
        </p>
        <p>
            Jag kan nog ändå tycka att testbar kod är bra kod. Koden ska vara lätt att följa och saker ska bara göra en sak. Även värt att tänka på att man håller koden löst-kopplad och väl inkappslad.
        </p>
        <p>
            Til: Tester är bra. Var noggrannare med att hålla funktioner och metoder till att bara göra en sak.
        </p>
        <h4>Kmom05</h4>
        

    {# 
        Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?

        Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet? Gick det bra att jobba med ORM i CRUD eller vad anser du om det?

        Berätta om du gjorde (delar av) extrauppgiften med användare och login.

        Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?

        Vilken är din TIL för detta kmom? #}
        <p>
            Jag tycker det gick bra att jobba igenom övningen. Den var bra skriven och lätt att följa.
        </p>
        <p>
            För att spinna vidare på temat med kortspelet så valde jag att göra en leaderboard.<br>
            Jag tänkte mest på att få in alla kraven. Användargränssnittet har mer att önska. tex bör delete inte vara baserad på id när man inte kan se spelarnas id någonstans( förutom i url:en). Ett  bättre alternativ hade nog varit att lägga en knapp bredvid spelarna när man visar upp alla.<br> Jag tycker det gick ok att jobba med CRUD. Det knepigaste är när man ska skicka med parametrar. Det blir lättare och lättare ju mer jag jobbar med det.<br>
        </p>
        <p>
            i brist av tid så har jag inte gjort några extrauppgiften.
        </p>
        <p>
            Jag tycker att det var ok att jobba med ORM. Det går rätt fort att sätta sig in i så jå jag kan förstå att det kan komma till användning i stora team där det kan effektivisera arbetssättet.<br> Dock tycker jag att man tappar kontrollen lite och att man bara får godta att saker fungerar. Tex så skrev jag fel namn när jag skulle skapa table i databasen och det är svårt att veta vart alla filer skapas som behöver ändras/tas bort.<br>
            Jag föredrar att skriva SQL så att man har lite mer kontroll på databasen. 

        </p>
        <p>
            TIL: Det finns många olika arbetssätt för samma saker. Kanske är det viktigaste bara att alla jobbar på samma sätt.
        </p>

        
        <h4>Kmom06</h4>
        <h4>Kmom10</h4>
    </div>
</div>
{% endblock body %}
